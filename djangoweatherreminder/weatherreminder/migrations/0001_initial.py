# Generated by Django 4.1.7 on 2023-03-08 12:50

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50, unique=True, verbose_name='User name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='City')),
            ],
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.TextField(choices=[('OpenWeatherMap', 'Open Weather'), ('WeatherBit', 'Weather Bit')])),
                ('country_code', models.CharField(blank=True, max_length=100, verbose_name='Country code')),
                ('coordinate', models.CharField(blank=True, max_length=100, verbose_name='Coordinate')),
                ('temp', models.CharField(blank=True, max_length=100, verbose_name='Temperature')),
                ('pressure', models.CharField(blank=True, max_length=100, verbose_name='Pressure')),
                ('humidity', models.CharField(blank=True, max_length=100, verbose_name='Humidity')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='weatherreminder.city')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_notifications', models.IntegerField(choices=[(1, 'One'), (3, 'Three'), (6, 'Six'), (12, 'Twelve')])),
                ('date_of_subscription', models.DateTimeField(auto_now_add=True)),
                ('service', models.TextField(choices=[('OpenWeatherMap', 'Open Weather'), ('WeatherBit', 'Weather Bit')])),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='weatherreminder.city')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='city',
            name='users',
            field=models.ManyToManyField(related_name='city_subscriptions', through='weatherreminder.Subscription', to=settings.AUTH_USER_MODEL),
        ),
    ]
